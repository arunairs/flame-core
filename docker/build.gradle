import cn.blinkmind.flame.gradle.TaskGroup
import cn.blinkmind.flame.gradle.external.docker.DockerSetting
import cn.blinkmind.flame.gradle.external.docker.DockerContainerSetting
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerKillContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRestartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage

def dockerSetting = DockerSetting.load()
allprojects { project ->
    buildscript {
        repositories {
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        }

        dependencies {
            classpath group: 'com.bmuschko', name: 'gradle-docker-plugin', version: '3.0.4'
        }
    }

    apply plugin: 'com.bmuschko.docker-remote-api'

    docker {
        url = dockerSetting.url
        registryCredentials {
            if (dockerSetting.registryUrl)
                url = dockerSetting.registryUrl
        }
    }
}

def images = ['mongo', 'redis']
images.each { image ->
    def componentName = image.capitalize()
    if (DockerContainerSetting.isEnabled(componentName)) {
        def container = DockerContainerSetting.load(image)

        task "pull${componentName}Image"(type: DockerPullImage, group: TaskGroup.DOCKER) {
            repository = container.getImage().repository
            tag = container.getImage().tag
        }

        task "create${componentName}Container"(type: DockerCreateContainer, dependsOn: ["pull${componentName}Image"], group: TaskGroup.DOCKER) {
            containerName = container.name
            portBindings = container.ports
            binds = container.binds
            if (container.cmd) {
                cmd = container.cmd
            }
            targetImageId { container.getImage().id }
            onError { exception ->
                if (!exception.message.contains('already in use'))
                    throw exception
            }
        }

        task "remove${componentName}Container"(type: DockerRemoveContainer, group: TaskGroup.DOCKER) {
            removeVolumes = false
            force = false
            targetContainerId {
                container.name
            }
        }

        task "start${componentName}Container"(type: DockerStartContainer, group: TaskGroup.DOCKER) {
            targetContainerId {
                container.name
            }
        }

        task "stop${componentName}Container"(type: DockerStopContainer, group: TaskGroup.DOCKER) {
            targetContainerId {
                container.name
            }
        }

        task "restart${componentName}Container"(type: DockerRestartContainer, group: TaskGroup.DOCKER) {
            targetContainerId {
                container.name
            }
        }

        task "kill${componentName}Container"(type: DockerKillContainer, group: TaskGroup.DOCKER) {
            targetContainerId {
                container.name
            }
        }
    }
}